var XONIX;
XONIX = {
    Settings: {
        WIDTH: 640,
        HEIGHT: 480,
        POINT_SIZE: 10,
        FIELD_WIDTH: function () {
            return this.WIDTH / this.POINT_SIZE;
        },
        FIELD_HEIGHT: function () {
            return this.HEIGHT / this.POINT_SIZE;
        },
        FIELD_DX: 6,
        FIELD_DY: 28 + 28,
        START_LOCATION: 200,
        SPEED: 0.3,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        COLOR_TEMP: "#000001",
        COLOR_WATER: "#000000",
        COLOR_LAND: "#00a8a8",
        COLOR_TRACK: "#901290",
        COLOR_LITE: "#ffffff",
        PERCENT_OF_WATER_CAPTURE: 75,
        PAUSE_TIME: 1000,
    },
};
XONIX.Utils = {
    randInt: function (a) {
        return (Math.random() * ++a) | 0;
    },
    randBool: function () {
        return !!XONIX.Utils.randInt(1);
    },
};
XONIX.Field = function (e) {
    var c, h, b, a, k, d, j, g, f;
    a = e.getCanvas();
    f = XONIX.Settings;
    h = f.FIELD_WIDTH();
    c = f.FIELD_HEIGHT();
    b = (h - 4) * (c - 4);
    j = (function () {
        var m, i, o, n, l;
        n = [];
        for (g = m = 0, o = h; 0 <= o ? m < o : m > o; g = 0 <= o ? ++m : --m) {
            n.push(
                function () {
                    l = [];
                    for (var p = 0; 0 <= c ? p < c : p > c; 0 <= c ? p++ : p--) {
                        l.push(p);
                    }
                    return l;
                }.apply(this)
            );
        }
        return n;
    })();
    d = 0;
    k = 0;
    this.init = function (n) {
        var m, l, o, i, p;
        if (n == null) {
            n = false;
        }
        for (i in j) {
            o = j[i];
            for (p in o) {
                m = o[p];
                l = i < 2 || i > h - 3 || p < 2 || p > c - 3 ? f.COLOR_LAND : f.COLOR_WATER;
                j[i][p] = l;
            }
        }
        d = b;
        if (n) {
            k = 0;
        }
        return null;
    };
    this.getColor = function (i, m) {
        try {
            return j[i | 0][m | 0];
        } catch (l) {
            return console.error("Error XONIX.Field.getColor:", i, m);
        }
    };
    this.setColor = function (i, m, l) {
        j[i | 0][m | 0] = l;
        return null;
    };
    this.getCountScore = function () {
        return k;
    };
    this.getCurrentPercent = function () {
        return (100 - (d / b) * 100) | 0;
    };
    this.clearTrack = function () {
        var l, m, i, n;
        for (i in j) {
            m = j[i];
            for (n in m) {
                l = m[n];
                if (j[i][n] === f.COLOR_TRACK) {
                    j[i][n] = f.COLOR_WATER;
                }
            }
        }
        return null;
    };
    this.fillTemporary = function (i, p) {
        var n, l, o, m;
        if (j[i][p] !== f.COLOR_WATER) {
            return;
        }
        j[i][p] = f.COLOR_TEMP;
        for (n = o = -1; o <= 1; n = ++o) {
            for (l = m = -1; m <= 1; l = ++m) {
                this.fillTemporary(i + n, p + l);
            }
        }
        return null;
    };
    this.tryToFill = function () {
        var p, n, m, l, o, q, i, r;
        d = 0;
        o = e.getBalls().getBalls();
        for (m = 0, l = o.length; m < l; m++) {
            p = o[m];
            this.fillTemporary(p.getX(), p.getY());
        }
        for (i in j) {
            q = j[i];
            for (r in q) {
                n = q[r];
                if (j[i][r] === f.COLOR_TRACK || j[i][r] === f.COLOR_WATER) {
                    j[i][r] = f.COLOR_LAND;
                    k += 10;
                }
                if (j[i][r] === f.COLOR_TEMP) {
                    j[i][r] = f.COLOR_WATER;
                    d++;
                }
            }
        }
        return null;
    };
    this.getData = function () {
        return j;
    };
    this.paint = function () {
        var l, m, i, n;
        for (i in j) {
            m = j[i];
            for (n in m) {
                l = m[n];
                a.fillStyle = j[i][n];
                a.fillRect(i * f.POINT_SIZE, n * f.POINT_SIZE, f.POINT_SIZE, f.POINT_SIZE);
            }
        }
        return null;
    };
    this.init();
    return null;
};
XONIX.Cube = function (b) {
    var a, j, i, f, h, c, g, e, d;
    a = b.getCanvas();
    f = b.getField();
    e = b.getXonix();
    c = XONIX.Settings;
    h = XONIX.Utils.randBool;
    g = 1;
    d = 1;
    j = 0;
    i = 0;
    this.init = function () {
        g = d = 1;
        j = h() ? c.SPEED : -c.SPEED;
        return (i = h() ? c.SPEED : -c.SPEED);
    };
    this.move = function () {
        this.updateDXandDY();
        g += j;
        return (d += i);
    };
    this.paint = function () {
        a.fillStyle = c.COLOR_WATER;
        a.fillRect(g, d, c.POINT_SIZE, c.POINT_SIZE);
        a.fillStyle = c.COLOR_LAND;
        return a.fillRect(g + 3, d + 3, c.POINT_SIZE - 6, c.POINT_SIZE - 6);
    };
    this.updateDXandDY = function () {
        var l, k;
        l = g + j;
        k = d + i;
        if (l < 0 || l > c.WIDTH - 1 || f.getColor(l, d) === c.COLOR_WATER) {
            j = -j;
        }
        if (k < 0 || k > c.HEIGHT - 1 || f.getColor(g, k) === c.COLOR_WATER) {
            i = -i;
        }
        return null;
    };
    this.isHitXonix = function () {
        return g + j === e.getX() && d + i === e.getY();
    };
    this.init();
    return null;
};
XONIX.Ball = function (g, u) {
    var r, p, a, o, e, n, l, k, c, q, s, f, b, d, t, i, m, h;
    e = g.getCanvas();
    c = g.getField();
    m = g.getXonix();
    t = XONIX.Settings;
    p = t.FIELD_WIDTH();
    r = t.FIELD_HEIGHT();
    d = XONIX.Utils.randInt;
    b = XONIX.Utils.randBool;
    a = Math.PI * 2;
    while (true) {
        i = d(p);
        h = d(r);
        n = c.getColor(i, h);
        f = true;
        for (q = 0, s = u.length; q < s; q++) {
            o = u[q];
            if (o.getX() === i || o.getY() === h) {
                f = false;
                break;
            }
        }
        if (n === t.COLOR_WATER && f) {
            break;
        }
    }
    l = b() ? t.SPEED : -t.SPEED;
    k = b() ? t.SPEED : -t.SPEED;
    this.getX = function () {
        return i | 0;
    };
    this.getY = function () {
        return h | 0;
    };
    this.updateDXandDY = function () {
        if (c.getColor(i + l, h) === t.COLOR_LAND) {
            l = -l;
        }
        if (c.getColor(i, h + k) === t.COLOR_LAND) {
            k = -k;
        }
        return null;
    };
    this.move = function () {
        this.updateDXandDY();
        i += l;
        return (h += k);
    };
    this.isHitTrackOrXonix = function () {
        this.updateDXandDY();
        if (c.getColor(i + l, h + k) === t.COLOR_TRACK) {
            return true;
        }
        if (i + l === m.getX() && h + k === m.getY()) {
            return true;
        }
        return false;
    };
    this.paint = function () {
        e.fillStyle = t.COLOR_LITE;
        e.beginPath();
        e.arc(i * t.POINT_SIZE, h * t.POINT_SIZE, t.POINT_SIZE * 0.5, 0, a, true);
        e.closePath();
        e.fill();
        e.fillStyle = t.COLOR_LAND;
        e.beginPath();
        e.arc(i * t.POINT_SIZE, h * t.POINT_SIZE, t.POINT_SIZE * 0.5 - 2, 0, a, true);
        e.closePath();
        e.fill();
        return null;
    };
    return null;
};
XONIX.Balls = function (b) {
    var a;
    a = [];
    this.add = function () {
        return a.push(new XONIX.Ball(b, a));
    };
    this.move = function () {
        var f, d, c, e;
        e = [];
        for (d = 0, c = a.length; d < c; d++) {
            f = a[d];
            e.push(f.move());
        }
        return e;
    };
    this.isHitTrackOrXonix = function () {
        var e, d, c;
        for (d = 0, c = a.length; d < c; d++) {
            e = a[d];
            if (e.isHitTrackOrXonix()) {
                return true;
            }
        }
        return false;
    };
    this.getBalls = function () {
        return a;
    };
    this.paint = function () {
        var f, d, c, e;
        e = [];
        for (d = 0, c = a.length; d < c; d++) {
            f = a[d];
            e.push(f.paint());
        }
        return e;
    };
    this.init = function () {
        a = [];
        return this.add();
    };
    this.init();
    return null;
};
XONIX.Xonix = function (c) {
    var i, b, f, l, m, n, a, e, h, g, d, k, j;
    b = c.getCanvas();
    m = c.getField();
    d = XONIX.Settings;
    i = d.POINT_SIZE;
    k = 0;
    j = 0;
    h = 0;
    g = 0;
    l = 0;
    f = 0;
    e = false;
    n = false;
    a = false;
    this.getX = function () {
        return k;
    };
    this.getY = function () {
        return j;
    };
    this.getCountLives = function () {
        return f;
    };
    this.decreaseCountLives = function () {
        return (f -= 1);
    };
    this.isSelfClosed = function () {
        return !!n;
    };
    this.setDirection = function (o) {
        if (e && ((o === d.LEFT && l === d.RIGHT) || (o === d.RIGHT && l === d.LEFT) || (o === d.UP && l === d.DOWN) || (o === d.DOWN && l === d.UP))) {
            return;
        }
        return (l = o);
    };
    this.isToggled = function () {
        return a;
    };
    this.init = function () {
        k = d.FIELD_WIDTH() / 2;
        j = 0;
        l = 0;
        f = 3;
        e = false;
        n = false;
        return null;
    };
    this.resume = function () {
        k = h;
        j = g;
        l = 0;
        e = false;
        return (n = false);
    };
    this.paint = function () {
        var q, o, p;
        q = l === d.LEFT || l === d.RIGHT ? k : k | 0;
        o = l === d.UP || l === d.DOWN ? j : j | 0;
        q *= i;
        o *= i;
        p = m.getColor(k, j) === d.COLOR_LAND;
        b.fillStyle = p ? d.COLOR_TRACK : d.COLOR_LITE;
        b.fillRect(q, o, i, i);
        b.fillStyle = p ? d.COLOR_LITE : d.COLOR_TRACK;
        b.fillRect(q + 3, o + 3, i - 6, i - 6);
        return null;
    };
    this.move = function () {
        var o;
        a = false;
        if (!e) {
            h = k;
            g = j;
        }
        if (l === d.LEFT) {
            k -= d.SPEED;
        }
        if (l === d.RIGHT) {
            k += d.SPEED;
        }
        if (l === d.UP) {
            j -= d.SPEED;
        }
        if (l === d.DOWN) {
            j += d.SPEED;
        }
        if (k < 0) {
            k = 0;
            l = 0;
        }
        if (j < 0) {
            j = 0;
            l = 0;
        }
        if (k > d.FIELD_WIDTH() - 1) {
            k = d.FIELD_WIDTH() - 1;
            l = 0;
        }
        if (j > d.FIELD_HEIGHT() - 1) {
            j = d.FIELD_HEIGHT() - 1;
            l = 0;
        }
        o = m.getColor(k, j);
        if (o === d.COLOR_LAND && e) {
            l = 0;
            e = false;
            a = true;
            m.tryToFill();
        }
        if (o === d.COLOR_WATER) {
            e = true;
            m.setColor(k, j, d.COLOR_TRACK);
        }
        return null;
    };
    this.init();
    return null;
};
XONIX.Game = function (o) {
    var f, d, k, a, i, e, b, c, m, h, n, g, j, l;
    o = o || {};
    g = XONIX.Settings;
    b = $("#xonix-game-container");
    e = b.find("#game-canvas").get(0).getContext("2d");
    i = b.find(".game-board");
    h = b.find(".game-manager");
    j = "xonix";
    n = this;
    if (!e) {
        alert("Game has no canvas!");
        return;
    }
    this.getCanvas = function () {
        return e;
    };
    this.getField = function () {
        return m;
    };
    this.getXonix = function () {
        return l;
    };
    this.getBalls = function () {
        return a;
    };
    m = new XONIX.Field(this);
    l = new XONIX.Xonix(this);
    a = new XONIX.Balls(this);
    c = new XONIX.Cube(this);
    k = function () {
        i.find(".scores .value").text(m.getCountScore());
        i.find(".lives .value").text(l.getCountLives());
        return i.find(".fill .value").text(m.getCurrentPercent());
    };
    f = function (p) {
        return (
            window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (q) {
                return window.setTimeout(q, 1000 / 60);
            }
        )(p);
    };
    d = function () {
        return setTimeout(function () {
            return f(n.frame);
        }, g.PAUSE_TIME);
    };
    this.frame = function () {
        var s, r, q;
        if (!l.getCountLives()) {
            r = m.getCountScore();
            console.info("Game over!", r);
            try {
                q = JSON.parse(localStorage.getItem(j));
                q = q.top;
            } catch (p) {
                q = 0;
            }
            s = Math.max(q, r);
            localStorage.setItem(j, JSON.stringify({ top: s }));
            h.show().find(".start").hide().end().find(".stop").show().find("button.again-btn").focus().end().find(".current").text(r).end().find(".top").text(q);
            return;
        }
        m.paint();
        l.move();
        l.paint();
        a.move();
        a.paint();
        if (a.isHitTrackOrXonix()) {
            l.decreaseCountLives();
            i.find(".lives .value").text(l.getCountLives());
            if (l.getCountLives() > 0) {
                l.resume();
                m.clearTrack();
                return d();
            }
        }
        if (m.getCurrentPercent() >= g.PERCENT_OF_WATER_CAPTURE) {
            m.init();
            l.init();
            a.add();
            return d();
        }
        if (l.isToggled() || !m.getCurrentPercent()) {
            i.find(".scores .value").text(m.getCountScore());
            i.find(".fill .value").text(m.getCurrentPercent());
        }
        if (!o.stepByStep) {
            return f(n.frame);
        }
    };
    $(document).on("keydown", function (p) {
        if (p.keyCode >= g.LEFT && p.keyCode <= g.DOWN) {
            return l.setDirection(p.keyCode);
        } else {
            if (p.which === 115) {
                return l.setDirection(0);
            } else {
                if (p.which === 70) {
                    return b.toggleClass("fullscreen");
                } else {
                    if (p.which === 110 && o.stepByStep) {
                        return n.frame();
                    }
                }
            }
        }
    });
    h.find("button.begin-btn")
        .focus()
        .on("click", function () {
            h.hide();
            return n.frame();
        });
    h.find("button.again-btn").on("click", function () {
        h.hide();
        l.init();
        m.init(true);
        a.init();
        k();
        return n.frame();
    });
    k();
    return null;
};
$(function () {
    new XONIX.Game();
    return null;
});
